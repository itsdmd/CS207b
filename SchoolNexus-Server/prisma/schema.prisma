// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    // This will act as username. This is named 'id' so that can be easily replaced by uuid if needed.
    id       String @id @unique
    password String

    fullName       String
    dateOfBirth    DateTime
    gender         Gender
    email          String?     @unique
    phoneNumber    String?     @unique
    address        String?
    profilePicture String?
    accountType    AccountType

    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    session   LoginSession?

    relatives          Relative[]
    tsa                TeacherSubjectAssignment[]
    tea                TimetableEntryAttendence[]
    uca                UserClasssAssignment[]
    fta                FormTeacherAssignment[]
    usa                UserSchoolAssignment[]
    meetingsCreated    Meeting[]
    meetingAttendences MeetingAttendence[]
    grades             StudentGrade[]             @relation("GradeOf")
    graded             StudentGrade[]             @relation("GradeBy")

    @@index([accountType])
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum AccountType {
    ADMIN
    PRINCIPAL
    TEACHER
    STUDENT
    SUBSTITUTE
}

// -------------- Info -------------- //
model Relative {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name         String
    studentId    String
    student      User         @relation(fields: [studentId], references: [id])
    relationship Relationship

    isPrimary   Boolean @default(false)
    phoneNumber String? @unique
    email       String? @unique

    @@unique([studentId, name, relationship, phoneNumber])
    @@unique([studentId, name, relationship, email])
    @@unique([studentId, isPrimary])
    @@index([studentId])
}

enum Relationship {
    FATHER
    MOTHER
    GUARDIAN
    SIBLING
}

// -------- Teacher ------- //
model Subject {
    id        String   @id // e.g. MATH
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String @unique // e.g. Mathematics

    tsa           TeacherSubjectAssignment[]
    studentGrades StudentGrade[]

    @@index([name])
}

model TeacherSubjectAssignment {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    teacherId String @unique
    teacher   User   @relation(fields: [teacherId], references: [id])

    subjectId String
    subject   Subject @relation(fields: [subjectId], references: [id])

    @@index([teacherId])
}

// ------------- Student ------------ //
model StudentGrade {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    studentId String
    student   User   @relation("GradeOf", fields: [studentId], references: [id])
    graderId  String
    grader    User   @relation("GradeBy", fields: [graderId], references: [id])

    quarterId String
    quarter   Quarter   @relation(fields: [quarterId], references: [id])
    subjectId String
    subject   Subject   @relation(fields: [subjectId], references: [id])
    typeId    String
    type      GradeType @relation(fields: [typeId], references: [id])
    value     Float

    @@unique([studentId, quarterId, subjectId, typeId])
    @@index([studentId])
    @@index([studentId, quarterId])
}

model GradeType {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name       String
    shortName  String?
    multiplier Float

    // Entries with null schoolId are the default grade types
    schoolId String?
    school   School? @relation(fields: [schoolId], references: [id])

    studentGrades StudentGrade[]

    @@unique([schoolId, name])
    @@index([name])
}

// ------------- School ------------- //
model School {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String
    address  String? @unique
    isPublic Boolean @default(true)

    gradeLevels GradeLevel[]
    classses    Classs[]

    usa              UserSchoolAssignment[]
    rooms            Room[]
    gradeTypes       GradeType[]
    timetableEntries TimetableEntry[]

    @@unique([name, address])
    @@index([name])
}

model UserSchoolAssignment {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id])

    schoolId String
    school   School @relation(fields: [schoolId], references: [id])

    startDate DateTime  @default(now())
    endDate   DateTime?

    @@unique([userId, schoolId, startDate])
    @@index([userId])
    @@index([schoolId])
}

enum GradeLevel {
    PRIMARY
    MIDDLE
    HIGH
}

model Room {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    schoolId String
    school   School @relation(fields: [schoolId], references: [id])

    name     String?
    building String?
    floor    Int
    index    Int
    classs   Classs?
    meetings Meeting[]

    @@unique([schoolId, building, floor, index])
    @@index([schoolId])
}

// -------------- Classs ------------- //
model Classs {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String
    grade    Int
    schoolId String
    school   School  @relation(fields: [schoolId], references: [id])
    roomId   String? @unique
    room     Room?   @relation(fields: [roomId], references: [id])

    uca              UserClasssAssignment[]
    timetableEntries TimetableEntry[]
    fta              FormTeacherAssignment[]

    @@unique([schoolId, name])
    @@index([schoolId, name])
}

model FormTeacherAssignment {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    teacherId String
    teacher   User   @relation(fields: [teacherId], references: [id])

    classsId String
    classs   Classs @relation(fields: [classsId], references: [id])

    year Int

    @@unique([teacherId, classsId, year])
    @@index([teacherId])
    @@index([classsId])
}

model UserClasssAssignment {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id])

    classsId String
    classs   Classs @relation(fields: [classsId], references: [id])

    @@unique([userId, classsId])
    @@index([userId])
    @@index([classsId])
}

// ------------ Timetable ------------ //
model Quarter {
    // id following format: <year>-<quarter-index_with-leftpad>
    // e.g. 2023-03
    id String @id @default(dbgenerated("to_char(now(), 'YYYY') || '-' || to_char(now(), 'Q')"))

    studentGrades    StudentGrade[]
    timetableEntries TimetableEntry[]
}

model TimetableEntry {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    quarterId     String
    quarter       Quarter @relation(fields: [quarterId], references: [id])
    weekOfQuarter Int

    schoolId String
    school   School @relation(fields: [schoolId], references: [id])
    classsId String
    classs   Classs @relation(fields: [classsId], references: [id])

    dayOfWeek Int // 0-6
    timeSlot  Int // 0-7 by default, can be configured in .env file

    attendenceId String?
    attendence   TimetableEntryAttendence[]

    @@unique([quarterId, weekOfQuarter, schoolId, classsId, dayOfWeek, timeSlot])
    @@index([schoolId, quarterId, classsId])
}

model TimetableEntryAttendence {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    timetableEntryId String
    timetableEntry   TimetableEntry @relation(fields: [timetableEntryId], references: [id])

    userId    String
    user      User    @relation(fields: [userId], references: [id])
    isPresent Boolean @default(false)

    @@unique([timetableEntryId, userId])
    @@index([timetableEntryId])
}

// ------------ Meeting ----------- //
model Meeting {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])
    startTime   DateTime
    endTime     DateTime
    roomId      String
    room        Room     @relation(fields: [roomId], references: [id])
    notes       String

    attendence MeetingAttendence[]

    @@unique([roomId, startTime])
    @@index([roomId])
}

model MeetingAttendence {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    meetingId String
    meeting   Meeting @relation(fields: [meetingId], references: [id])

    userId String
    user   User   @relation(fields: [userId], references: [id])

    isPresent Boolean @default(false)

    @@unique([meetingId, userId])
    @@index([meetingId])
    @@index([userId])
}

// --------- Login sessions --------- //
// Each user can only have 1 login session at a time
model LoginSession {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    expiresAt DateTime?

    @@index([userId])
}
