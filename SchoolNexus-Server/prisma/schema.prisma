// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String @unique
  password String

  fullName       String
  dateOfBirth    DateTime
  gender         Gender
  email          String?     @unique
  phoneNumber    String?     @unique
  address        String?
  profilePicture String?
  accountType    AccountType

  classroom   Classroom? @relation(fields: [classroomId], references: [id])
  classroomId String?
  school      School?    @relation(fields: [schoolId], references: [id])
  schoolId    String?

  tsa               TeacherSubjectAssignment[]
  spa               SchoolPrincipalAssignment[]
  scheduleEntry     ScheduleEntry[]
  meetingAttendence Meeting[]
  meetingsCreated   Meeting[]                   @relation("MeetingCreator")
  relatives         Relative[]
  grades            StudentGrade[]              @relation("GradeOf")
  studentGrader     StudentGrade[]              @relation("GradedBy")
  session           LoginSession?

  @@index([username])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AccountType {
  ADMIN
  PRINCIPAL
  TEACHER
  STUDENT
}

// -------------- Info -------------- //
model Relative {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  phoneNumber  String? @unique
  relationship String

  studentId String
  student   User   @relation(fields: [studentId], references: [id])
}

enum Relationship {
  FATHER
  MOTHER
  GUARDIAN
  SIBLING
}

// -------- Teacher ------- //
model TeacherSubjectAssignment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherId String @unique
  teacher   User   @relation(fields: [teacherId], references: [id])

  subject Subject

  @@index([teacherId])
}

enum Subject {
  MATHS
  LITERATURE
  PHYSICS
  CHEMISTRY
  BIOLOGY
  GEOGRAPHY
  HISTORY
  FOREIGN_LANGUAGE
}

// ------------- Student ------------ //
model StudentGrade {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentId  String
  student    User   @relation("GradeOf", fields: [studentId], references: [id])
  gradedById String
  gradedBy   User   @relation("GradedBy", fields: [gradedById], references: [id])

  semesterId String
  semester   Semester  @relation(fields: [semesterId], references: [id])
  subject    Subject
  grade      Float
  type       GradeType
  multiplier Float

  @@index([studentId, semesterId, subject])
}

enum GradeType {
  QUIZ
  TEST_1
  TEST_2
  EXAM_MIDTERM
  EXAM_FINAL
}

// ------------- School ------------- //
model School {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  address  String? @unique
  isPublic Boolean @default(true)

  gradeLevels GradeLevel[]
  classrooms  Classroom[]
  schedules   SchoolSemestralSchedule[]

  spa      SchoolPrincipalAssignment[]
  meetings Meeting[]
  User     User[]
}

enum GradeLevel {
  PRIMARY
  MIDDLE
  HIGH
}

// -------------- Classroom ------------- //
model Classroom {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  members User[]

  scheduleEntries ScheduleEntry[]

  @@unique([schoolId, name])
  @@index([schoolId, name])
}

// ------------ Schedule ------------ //
model Semester {
  id            String                    @id @default(uuid())
  year          Int
  semester      Int // Starts at 1
  schedules     SchoolSemestralSchedule[]
  studentGrades StudentGrade[]
}

model SchoolSemestralSchedule {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolId      String
  school        School          @relation(fields: [schoolId], references: [id])
  semesterId    String
  semester      Semester        @relation(fields: [semesterId], references: [id])
  scheduleEntry ScheduleEntry[]

  @@unique([schoolId, semesterId])
}

model ScheduleEntry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scheduleId String
  schedule   SchoolSemestralSchedule @relation(fields: [scheduleId], references: [id])

  dayOfWeek Int
  startTime DateTime
  endTime   DateTime

  subject     Subject
  teacherId   String
  teacher     User      @relation(fields: [teacherId], references: [id])
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id])
}

// ------------ Principal ----------- //
model SchoolPrincipalAssignment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  principalId String
  principal   User   @relation(fields: [principalId], references: [id])

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  startDate DateTime  @default(now())
  endDate   DateTime? @default(dbgenerated("NOW() + INTERVAL '5 year'"))
}

model Meeting {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation("MeetingCreator", fields: [createdById], references: [id])

  title     String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  room      String?
  startTime DateTime
  endTime   DateTime
  notes     String?

  attendees User[]

  @@unique([schoolId, room, startTime])
}

// --------- Login sessions --------- //
// Each user can only have 1 login session at a time
model LoginSession {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  token     String   @unique
  expiresAt DateTime

  @@index([userId])
}
